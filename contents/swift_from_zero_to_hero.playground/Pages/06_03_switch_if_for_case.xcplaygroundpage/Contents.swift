//:[ToC](00-00_toc) | [Tips and Tricks](900-00-tips_and_tricks) | [Previous](@previous) | [Next](@next)
//:> ## Switch / If Case oraz For Case / Optional binding / Optional Pattern Matching
import Foundation

/*:
 Wykorzystamy w dalszej czƒô≈õci rozszerzenie na s≈Çowniku, kt√≥re dla danej warto≈õci zwr√≥ci listƒô wszystkich kluczy, kt√≥re posiadajƒÖ tƒÖ warto≈õƒá.  Nie bƒôdziemy siƒô teraz wgryzaƒá w to jak dzia≈Ça bo nie jeste≈õmy na to jeszcze gotowi, ale zobaczymy jak mo≈ºemy tego u≈ºywaƒá.
 */
extension Dictionary where Value : Equatable {
    // to jest brzydki kod aby przyk≈Çady by≈Çy ≈Çadniejsze ;)
    func key(for val : Value) -> Key {
        filter ({ (_, value) in value == val })
            .map ({ $0.key })
            .first!
    }
}

let kosci = [1: "‚öÄ", 2: "‚öÅ", 3: "‚öÇ", 4: "‚öÉ", 5: "‚öÑ", 6: "‚öÖ"]
kosci.count

/*:
Rzucamy ko≈õciƒÖ...
 */
var kosc1 = kosci[Int(arc4random_uniform(UInt32(kosci.count)) + 1)]!

/*:
 Poniewa≈º w zmiennej `kosc1` mamy co≈õ¬†co by≈õmy pokazywali a potrzebujemy informacji o liczbie oczek aby m√≥c liczyƒá punkty. To wykorzystamy dopiero co stworzone rozszerzenie. O rozszerzeniach opowiemy innym razem.
 */
kosci
    .key(for: kosc1)

/*:
 Wiƒôc potrafimy dostaƒá siƒô¬†do informacji ile dana ko≈õƒá jest warta w punktach. Teraz to samo dla drugiej ko≈õci...
 */
var kosc2 = kosci[Int(arc4random_uniform(UInt32(kosci.count)) + 1)]!
kosci.key(for: kosc2)

/*:
 # Switch
 
 Instrukcja `Switch` w Swift jest bardziej czytelnƒÖ wersjƒÖ wielu wystƒôpujƒÖcych po sobie instrukcji `if else`. Co wiƒôcej pozwala na wykorzystanie _pattern matching_-u aby lepiej wyraziƒá intencje w kodzie.
 
 W switch-u `case`y sƒÖ sprawdzane od g√≥ry do do≈Çu. Dlatego najlepiej zaczynaƒá od **najbardziej** szczeg√≥≈Çowych i przechodziƒá do mniej szczeg√≥≈Çowych. Do tego kompilator wymusza aby **wszystkie** mo≈ºliwe kombinacje zosta≈Çy obs≈Çu≈ºone. To sprawia, ≈ºe ta instrukcja jest bezpieczna.
 
 Jednak kompilator te≈º nie zawsze jest w stanie stwierdziƒá czego dok≈Çadnie brakuje. I jest specjalne s≈Çowo kluczowe `default`, kt√≥re switch wykona je≈ºeli ≈ºaden z innych przypadk√≥w nie m√≥g≈Ç byƒá dopasowany. Mo≈ºna je pominƒÖƒá **tylko** gdy kompilator jest w stanie _udowodniƒá_, ≈ºe wszystkie ≈õcie≈ºki zosta≈Çy obs≈Çu≈ºone.
 
 Wiƒôc rzucili≈õmy kostkami. Warto zobaczyƒá ile  zdobyli≈õmy punkt√≥w...
 */

switch (kosc1, kosc2) {

//default:
    //    break // üí•

case ("‚öÄ", "‚öÄ"): // (1, 1) dok≈Çadny wzorzec
    fallthrough  // kontynuuj wykonywanie kolejnego case-a

    
 // mo≈ºna zapisaƒá te≈º: case ("‚öÄ", "‚öÄ"), ("‚öÖ", "‚öÖ"):
case ("‚öÖ", "‚öÖ"):
    "30 punktow"

    
    // Dziƒôki pattern matching-owi mo≈ºemy okre≈õliƒá zakresy
case ("‚öÄ"..."‚öÅ", "‚öÄ"..."‚öÅ"):
    "16 punktow"
    

    // `_` m√≥wi, ≈ºe nie interesuje nas "wzorzec" ale mo≈ºemy "filtrowaƒá" to
    // dopasowanie instrukcjƒÖ `where`. I tak w tym przypadku m√≥wiƒô, ≈ºe
    // kod ma siƒô wykonaƒá gdy suma wyrzuconych oczek jest `7`
case _ where kosci.key(for: kosc1) + kosci.key(for: kosc2) == 7:
    "5 punktow"

    
    
    // Jak wcze≈õniej ale tym razem warunkiem jest to, ≈ºe liczba
    // oczek jest taka sama na obu ko≈õciach.
case (_, _) where kosc1 == kosc2:
    
    let wartosc = kosci.key(for: kosc2)

    // Je≈ºeli podwojona warto≈õƒá¬†oczek to 4 lub 10 to dostaje 8 punkt√≥w.
    // W ka≈ºdym innym przypadku to 10 punkt√≥w.
    switch wartosc * 2 {
    case 4, 10:
        "8 punktow"
    default:
        "10 punktow"
    }

    
    // Nie mia≈Çy zastosowania, ≈ºadne inne zasady wiƒôc liczba punkt√≥w
    // to suma oczek wyrzuconych ko≈õci.
default:
    let wartosc1 = kosci.key(for: kosc1)
    let wartosc2 = kosci.key(for: kosc2)

    "\(wartosc1 + wartosc2) punktow"
}

//: Mo≈ºna te≈º __switchowaƒá__ po klasach

class Pierwsza {}
class Druga    { var licznik = 42 }
class Trzecia  { var temperatura = 24 }

var jakasInstancja: AnyObject = Trzecia()

switch jakasInstancja {

//: __pod≈Çoga__ je≈ºeli nie potrzebuje odwo≈Çaƒá siƒô do zmiennej
case _ as Pierwsza: 
    "pierwsza"

case let typ as Druga:
    type(of: typ)
    typ.licznik

case let typ as Trzecia:
    typ.temperatura
    typ.temperatura = 69
    typ.temperatura

default:
    break;
}

jakasInstancja.description


//: ### If Case oraz For Case
enum Opcje {
    case calkowita(Int)
    case zmiennoPrzecinkowa(Double)
    case textowa(String)
}

let jakasClakowita = Opcje.calkowita(42)

//: W sytuacji gdy chcemy co≈õ zrobic z sanƒÖ sta≈ÇƒÖ/zmiennƒÖ mo≈ºemy wykorzystaƒá __switch__

switch jakasClakowita {
case .calkowita(let calkowita):
    "Hura dla ca≈Çkowitej \(calkowita)"
case .zmiennoPrzecinkowa:
    break
case .textowa:
    break;
}

// mo≈ºna te≈º nieco to skr√≥ciƒá i zapisaƒá tak:

switch jakasClakowita {
case .calkowita(let calkowita):
    "Hura dla ca≈Çkowitej \(calkowita)"

default:
    break;
}

//: #### if case

if case .calkowita(let liczbaCalkowita) = jakasClakowita {
     "Hura dla ca≈Çkowitej \(liczbaCalkowita)"
}

if case .calkowita(let liczbaCalkowita) = jakasClakowita , liczbaCalkowita > 40 {
    "Hura dla ca≈Çkowitej \(liczbaCalkowita)"
}

//: #### for case
let jakiesOpcje: [Opcje] = [ .calkowita(42), .zmiennoPrzecinkowa(6.9), .textowa("sto"), .calkowita(69)]

for opcja in jakiesOpcje {
    switch opcja {
    case .calkowita(let liczbaCalkowita):
        "Hura dla ca≈Çkowitej \(liczbaCalkowita)"
    default:
        break
    }
}

for case .calkowita(let liczbaCalkowita) in jakiesOpcje {
    "Hura dla ca≈Çkowitej \(liczbaCalkowita)"
}

//: podobnie jak wczesniej mo≈ºeby dodatkowo zacie≈õniaƒá zakres ktory nas interesuje przy pomocy s≈Çowa kluczowego __where__
for case .calkowita(let liczbaCalkowita) in jakiesOpcje where liczbaCalkowita < 69 {
    "Hura dla ca≈Çkowitej \(liczbaCalkowita)"
}

let procentAlko: Int? = 40

//: #### Optional binding
if let procent = procentAlko , procent >= 34 {
    "Mo≈ºna piƒá bez obawie≈Ñ"
}

//: #### [Optional pattern matching](https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Patterns.html#//apple_ref/doc/uid/TP40014097-CH36-ID520)
if case let procent? = procentAlko , procent >= 34 { // bez '?` bƒôdzie Int?
     "Mo≈ºna piƒá bez obawie≈Ñ"
    type(of: procent)
}

let procenty: [Int?] = [42, nil, 5, nil, 12]

for case let procent? in procenty where procent > 5 {
    procent
}

//:[ToC](00-00_toc) | [Tips and Tricks](900-00-tips_and_tricks) | [Previous](@previous) | [Next](@next)
