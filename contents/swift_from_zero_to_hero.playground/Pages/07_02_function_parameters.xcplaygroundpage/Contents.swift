//:[ToC](00-00_toc) | [Tips and Tricks](900-00-tips_and_tricks) | [Previous](@previous) | [Next](@next)
//: ## In-Out, Przekazywanie Typ√≥w Referencyjnych, Przekazywanie/Zwracanie Funkcji, Zagnie≈ºdzone Funkcje

import UIKit

/*:
 Ni≈ºej zmienna `number` umo≈ºliwia przypisanie innej warto≈õci:
 */

var number = 42

/*:
 Napiszemy funkcjƒô do kt√≥rej dodamy adnotacje `@available`. Mo≈ºna jej u≈ºyƒá np. do poinformowania innych developer√≥w kiedy jaka≈õ funkcjonalno≈õƒá zosta≈Ça wprowadzona, bƒôdzie wycofana lub daƒá wskaz√≥wkƒô¬†czego mo≈ºna u≈ºyƒá zamiast.
 
 [Wiƒôcej atrybut√≥w do @available mo≈ºna zobaczyƒá tu: Attributes](https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Attributes.html)
 
 Funkcje definiujƒÖ pewien kontrakt i czasem wymagajƒÖ przekazania dodatkowych argument√≥w. Co wa≈ºne argumenty do funkcji sƒÖ przekazywane jako sta≈Çe.
 */

@available(*, introduced: 1.2, deprecated: 2.0, message: "This method explodes please use: takesIntAndMutatesIt")
func takesInt(_ parametr: Int) {
    // üí• Left side of mutating operator isn't mutable: 'parametr' is a 'let' constant
//    parametr -= 2 // uncomment to see compiler error
}

takesInt(number)
number

/*:
W funkcji `takesInt` nazwany argument jest przekazany jako sta≈Ça. A co za tym idzie nie mo≈ºemy go mutowaƒá. Gdy zachodzi taka potrzeba mo≈ºemy stworzyƒá¬†lokalnƒÖ (dla funkcji) zmienna i jƒÖ mutowaƒá. Uwaga nazwa jest ta sama ale u≈ºywamy tutaj mechanizmu przys≈Çaniania (ang. shadowing).
*/
func takesIntAndMutatesIt(_ number: Int) {
    var number = number
    number -= 2
}

takesIntAndMutatesIt(number) // przekazana jest kopia
number

/*:
 W placu zabaw widaƒá, ≈ºe lokalnie funkcja faktycznie utworzy≈Ça kopie i wykona≈Ça operacje. Natomiast zmienna, kt√≥ra pos≈Çu≈ºy≈Ça jako argument do funkcji ma takƒÖ samƒÖ warto≈õƒá jak przed wywo≈Çaniem funkcji.

 ### In - Out
 
 Aby m√≥c zmieniƒá przekazywany parametr musimy u≈ºyƒá s≈Çowa kluczowego __inout__ .
 */

func takeAnIntAndMutatesIt(_ number: inout Int) {
    guard number >= 2 else {
        return
    }

    number -= 2
}

number = 42
takeAnIntAndMutatesIt(&number)
number

/*:
Jak widaƒá zmienna z poza funkcji ma warto≈õƒá ustalonƒÖ wewnƒÖtrz funkcji. Co jest bardzo fajne jƒôzyk wymusza specjalnƒÖ adnotacje przy pomocy symbolu `&`. Dziƒôki temu jasno widaƒá, ≈ºe dana warto≈õƒá mo≈ºe zostaƒá zamieniona.

 Co jest jeszcze ciekawsze nie dzieje siƒô¬†to jak by mo≈ºna by≈Ço przypuszczaƒá za sprawƒÖ przekazania referencji do mutowanego obiektu. Nawet taka funkcja dostaje swojƒÖ lokalnƒÖ kopie. Jedyne co siƒô r√≥≈ºni to w momencie _zwracania_ warto≈õci (ko≈Ñczenia funkcji) po oryginalny adres w pamiƒôci komputera jest wpisywana zmutowana instancja.

 Mo≈ºna by siƒô zastanowiƒá po co tyle zachodu. I odpowiedziƒÖ jest wielowƒÖtkowo≈õƒá. Gdyby ta funkcja by≈Ça uruchomiona na wielu wƒÖtkach to zachodzi≈Çoby ryzyko, ≈ºe r√≥≈ºne wƒÖtki w r√≥≈ºnych momentach mutowa≈Çyby r√≥≈ºne czƒô≈õci obiektu. Je≈ºeli brzmi to zagmatwanie to dlatego, ≈ºe trochƒô jest. Natomiast poniewa≈º w tym wypadku ka≈ºde wywo≈Çanie otrzymuje swojƒÖ w≈ÇasnƒÖ kopie to nie ma problemu ze wsp√≥≈Çdzielonymi zasobami.
 */

//: PrzydatnƒÖ praktykƒÖ jest komentowanie metod. Dziƒôki temu w __Quick help__ bƒôdziemy mogli zobaczyƒá bardzo u≈ºyteczny opis.

/**
Przyk≈Çadowa metoda s≈Çu≈ºƒÖca do pokazania w jaki spos√≥b dodany komentarz pojawia siƒô w podrƒôcznej pomocy. DobrƒÖ praktykƒÖ jest dokumentowanie co robi dana funkcja i czego siƒô po niej mo≈ºna spodziewaƒá.

- parameter input:  Przyk≈Çadowy parametr wej≈õciowy, zostanie zwr√≥cony jako pierwszy w tuplecie.
- parameter output: Przyk≈Çadowy parametr wyj≈õciowy, zostanie zwr√≥cony jako drugi w tuplecie.

- returns: Zwraca krotkƒô sk≈ÇadajƒÖcƒÖ siƒô z przekazanych parametr√≥w.
*/
func functionToDocument(_ input: String, output: Int) -> (in: String, out: Int) {
    return (input, output)
}

let willThisWork = functionToDocument("sprawdzam", output: 69)
willThisWork.in
willThisWork.1

//: ## Przekazywanie Typ√≥w Referencyjnych
//: W tym wypadku w argumencie funkcji dostaniemy referencje ("wskazanie") do obiektu a nie jego kopie.

// Tworze widok o wymiarach 50x50
let frame = CGRect(x: 0, y: 0, width: 50, height: 50)
let view = UIView(frame: frame)
                  
// Ustawiam kolor t≈Ça na czerwony
view.backgroundColor = UIColor.red

// Po prawej w placu zabaw widzƒô adres w pamiƒôci komputera
Unmanaged.passUnretained(view).toOpaque()

// Mogƒô sobie podejrzeƒá jak ten widok wyglƒÖda
view

func takeInAView(_ view: UIView) {
    // Sprawdzam adres przekazanego widoku
    Unmanaged.passUnretained(view).toOpaque()
    
    // _Przez_ referencje zmieniam kolor t≈Ça na zielony
    view.backgroundColor = UIColor.green

    // üí• Cannot assign to value: 'view' is a 'let' constant
//    view = UIView() // uncomment this line to see the error
}

takeInAView(view)

/*:
 Mimo, ≈ºe __widok__ jest zdefiniowany jako sta≈Ça (__let__) to poniewa≈º jest przekazany przez referencjƒô wewnƒÖtrz funkcji mo≈ºna zmieniƒá jego __nie sta≈Çe__ atrybuty.
 
 Teraz gdy podejrzymy `view` to oka≈ºe siƒô, ≈ºe t≈Ço jest zielone! To co trzeba pamiƒôtaƒá przy pracy z `let` to, ≈ºe **sama referencja siƒô nie zmienia wiƒôc to ona jest sta≈Ça a nie obiekt na kt√≥ry wskazuje**.
 */

view

//: > Natomiast gdy przeka≈ºemy do funkcji referencje (typ referencyjny) i dodatkowo ten parametr jest __inout__ to wtedy wewnƒÖtrz funkcji bƒôdziemy mogli ca≈Çkowicie podmieniƒá obiekt na zupe≈Çnie nowy.

func takeInAInOutView(_ view: inout UIView) {

    // Bez parametru `inout` ta linijka siƒô nie skompluje
    view = UIView(frame: CGRect(x: 0,y: 0, width: 50, height: 50))
    
    // Ustawiam kolor t≈Ça na szary
    view.backgroundColor = UIColor.lightGray
}

var testView = UIView(frame: frame)
testView.backgroundColor = UIColor.yellow
testView

/*:
 Po stworzeniu widoku i ustawieniu mu koloru t≈Ça na ≈º√≥≈Çty chcƒô _zapisaƒá_ adres na kt√≥ry wskazuje `testView`.
 
 > Dla przypomnienia. Referencja wskazuje na jaki≈õ¬†obiekt a nie jest tym obiektem. Tak jak adres mieszkania nie jest tym mieszkaniem.
 */
let referenceBefore = Unmanaged.passUnretained(testView).toOpaque()

takeInAInOutView(&testView)

let referenceAfter = Unmanaged.passUnretained(testView).toOpaque()

testView

referenceBefore == referenceAfter

/*:
Widaƒá, ≈ºe po wywo≈Çaniu funkcji `takeInAInOutView` referencja `testView` wskazuje na inne miejsce w pamiƒôci. Czyli na inny obiekt!
 
## Przekazywanie Funkcji Jako Argumentu Do Funkcji
 */

func addNumbers(_ a: Int, _ b:Int) -> Int {
    return a + b
}
type(of: addNumbers)

func doOperation(_ operation: (Int, Int) -> Int, l1: Int, l2: Int) -> Int {
    operation(l1, l2)
}

let result = doOperation(addNumbers, l1: 40, l2: 2)
result

//: ## Zwracanie Funkcji i Zagnie≈ºd≈ºanie Funkcji
//: Funkcje mogƒÖ zwracaƒá funkcje. Wtedy ich zwracany typ to typ zwracanej funkcji. Jeden przyk≈Çad jest wart tysiƒÖca s≈Ç√≥w... a na kanale mamy osobne odcinki, kt√≥re zag≈ÇƒôbiajƒÖ siƒô w temat ≈ºonglowania funkcjami.

func returnAnotherFunction() -> ( () -> String ) { // ... -> () -> String

    func quoteFunction() -> String {
        "Mo≈ºna piƒá bez obawie≈Ñ"
    }
    type(of: quoteFunction)

    return quoteFunction
}

let someFunction = returnAnotherFunction()
type(of: someFunction)

someFunction()

//:[ToC](00-00_toc) | [Tips and Tricks](900-00-tips_and_tricks) | [Previous](@previous) | [Next](@next)
