//:[ToC](00-00_toc) | [Tips and Tricks](900-00-tips_and_tricks) | [Previous](@previous) | [Next](@next)
//: ## Definiowanie i WywoÅ‚ywanie Funkcji
//: __Funkcje__ to niezaleÅ¼ne kawaÅ‚ki reuÅ¼ywalnego kodu. __Metody__ to funkcje naleÅ¼Ä…ce do jakiegoÅ› __typu__ np. instancji klasy.
//: Funkcje deklarujemy przy uÅ¼ycia sÅ‚owa kluczowego __func__. NastÄ™pnie nadajemy jej nazwÄ™ (_konwencja_ : notacjaWielbÅ‚Ä…dzia), parametry w nawiasach okrÄ…gÅ‚ych i w klamerkach __ciaÅ‚o funkcji__ czyli kod jaki ma byÄ‡ wykonywany przy jej wywoÅ‚aniu.
func justQuote() {
    print("MoÅ¼na piÄ‡ bez obawieÅ„")
}

//: Funkcja przyjmujÄ…ca parametr.
func sayHi(name: String) {
    print("CzeÅ›Ä‡ \(name), bÄ™dziesz to jeÅ›Ä‡?\n")
}

//: Funkcja przyjmujÄ…ca wiÄ™cej parametrÃ³w.
func quote(quote: String, author: String) {
    print("\"\(quote)\"\n\t\t-- \(author)\n")
}

//: Funkcje wywoÅ‚ujemy podajÄ…c jej nazwÄ™ i przekazujÄ…c w parametrach niezbÄ™dne argumenty. Co ciekawe pierwszy argument nie jest nazwany. To co widaÄ‡ przy wywoÅ‚aniu funkcji to _zewnÄ™trzna nazwa parametru_ . Nazwa parametru uÅ¼yta wewnÄ…trz to _wewnÄ™trzna nazwa parametru_ . DomyÅ›lnie zewnÄ™trzna i wewnÄ™trzna nazwa parametru jest taka sama.
quote(quote: "MoÅ¼na piÄ‡ bez obawieÅ„.", author: "WiesÅ‚aw Wszywka")

func quoteWithArguments(quote: String, whoSaidId author: String) {
    print("\"\(quote)\"\n\t\t-- \(author)\n")
}

/*:
 Warto zauwaÅ¼yÄ‡, Å¼e `whoSaidId` jest widoczna _na zewnÄ…trz_ funkcji. W momencie gdy jest wywoÅ‚ywana. WewnÄ…trz ciaÅ‚a funkcji (pomiÄ™dzy klamrami `{}`) jest juÅ¼ uÅ¼yta, krÃ³tsza nazwa `author`. DziÄ™ki temu kod moÅ¼e byÄ‡ bardziej zwiÄ™zÅ‚y a wywoÅ‚anie lepiej oddawaÄ‡ _intencjÄ™_.
 */

quoteWithArguments(quote: "Badziewie do badziewia.", whoSaidId: "WiesÅ‚aw Wszywka")

//: PoniewaÅ¼ sÄ… jeszcze pewne naleciaÅ‚oÅ›ci nazewnicze z __Objective CğŸ‘‘__ to czÄ™sto pierwsza nazwa parametru znajduje siÄ™ w nazwie metody.

func quoteAnQuote(_ quote: String, of author: String) {
    print("\"\(quote)\"\n\t\t-- \(author)\n")
}

quoteAnQuote("Niebo w ziemi.", of: "WiesÅ‚aw Wszywka")

//: JeÅ¼eli chcemy pozbyÄ‡ siÄ™ zewnÄ™trznych parametrÃ³w w wywoÅ‚aniu funkcji, moÅ¼emy to zrobiÄ‡ zastepujÄ…c je "_". Funkcje potrafiÄ… teÅ¼ zwracaÄ‡ wynik swojego dziaÅ‚ania. Oznacza siÄ™ to przez strzÅ‚kÄ™ __ -> __ i podanie zwracanego typu.

func addTwoNumbers(_ number1: Int, _ number2: Int) -> Int {
    return number1 + number2
}

var sumOfNumbers = addTwoNumbers(40, 2)

/*:
 Typy argumentÃ³w oraz zwracany typ tworzÄ… razem coÅ› co nazywa siÄ™ "typem funkcji".
 
 Natomiast gdy mÃ³wimy, Å¼e _coÅ› jest jakiegoÅ› typu_ to mamy na myÅ›li, Å¼e moÅ¼e przyjÄ…Ä‡ wartoÅ›Ä‡ z gÃ³ry ustalonego zbioru. Banalnym przykÅ‚adem jest typ `Int`. Gdy jakaÅ› zmienna/staÅ‚a przechowuje wartoÅ›Ä‡ tego typu to wiemy, Å¼e moÅ¼e to byÄ‡ jakaÅ› liczba caÅ‚kowita np. -1, 42, etc.
 */
type(of: addTwoNumbers)

//: MoÅ¼emy teÅ¼ stworzyÄ‡ referencje (wskazanie), ktÃ³ra bÄ™dzie "przechowywaÄ‡" funkcje. Kluczowe jest uÅ¼ycie __samej__ nazwy funkcji.

let function = addTwoNumbers

sumOfNumbers = function(60, 9)

//: MoÅ¼emy przypisaÄ‡ domyÅ›lne wartoÅ›ci dla parametrÃ³w funkcji. Lepiej jest umieszczaÄ‡ takie parametry na koÅ„cu listy. DziÄ™ki temu moÅ¼emy pominÄ…Ä‡ te parametry przy wywoÅ‚ywaniu funkcji.

func quoteWithDefaultParameters(_ quote: String, author: String, times: Int = 1) {
    for _ in 0..<times {
        quoteAnQuote(quote, of: author)
    }
}

quoteWithDefaultParameters("Kur zapiaÅ‚!", author: "WiesÅ‚aw Wszywska")

//: Funkcje mogÄ… przyjmowaÄ‡ teÅ¼ opcjonalne argumenty. Co fajne poniewaÅ¼ w tym wypadku nadajemu mu domyÅ›lnÄ… wartoÅ›Ä‡ jako __nil__ to przy wywoÅ‚aniu moÅ¼emy pominÄ…Ä‡ ten agrument.

func quoteWithOptionalAuthor(_ quote: String, author: String? = nil) {
    let quoteAuthor = author ?? "Anonim"
    quoteAnQuote(quote, of: quoteAuthor)
}

quoteWithOptionalAuthor("Gdzie kucharek szeÅ›Ä‡ tam...")

/*:
A co jeÅ¼eli nie wiemy ile chcemy tych parametrÃ³w... na to mamy i takiego wariata ;) Aby okreÅ›liÄ‡, Å¼e funkcja przyjmuje zmiennÄ… iloÅ›Ä‡ argumentÃ³w za typem parametru dodajemy "...". WewnÄ…trz funkcji otrzymamy SwiftowÄ… tablicÄ™ tego typu. Trzeba przyznaÄ‡, Å¼e jest to o wiele przyjemniejsza skÅ‚adnia niÅ¼ w C/ObjC.

Napiszemy funkcjÄ™, ktÃ³ra zsumuje wszystkie przekazane liczby. Zrobimy to przy uÅ¼yciu innej funkcji o nazwie `reduce`. Jak ta funkcja dziaÅ‚a nie jest waÅ¼ne w tym momencie. Istotne jest to, Å¼e w jednej funkcji moÅ¼emy wywoÅ‚ywaÄ‡ inne funkcje.d
 */
func sumNumbers(_ numbers: Int...) -> Int {
    type(of: numbers)

    return numbers.reduce(0, +)
}

sumNumbers(1,2,3,4,5)

/*:
 ## PrzeciÄ…Å¼anie Funkcji

 Dobra nazwa jest jak zÅ‚oto. Nie warto jej marnowaÄ‡ dlatego istnieje mechanizm w jÄ™zyku pozwalajÄ…cy na ponowne jej uÅ¼ycie. To czym siÄ™ musi rÃ³Å¼niÄ‡ to typy argumentÃ³w.

 */

func doStuff(_ z: String) { z }
func doStuff(_ z: Int) { z }
//type(of: doStuff) // ğŸ’¥ biedak nie wie ktÃ³rÄ… zawoÅ‚aÄ‡

//: W tym wypadku Swift podejmuje decyzjÄ™ ktÃ³rÄ… funkcje zawoÅ‚aÄ‡ w czasie kompilacji. Sprawy majÄ… siÄ™ troszeczkÄ™ inaczej jeÅ¼eli funkcja/metoda zdefiniowana w klasie i inna klasa jÄ… przeciÄ…Å¼a, ale o tym pÃ³xniej ğŸ¤“
type(of: (doStuff as (String)->Void))
type(of: (doStuff as (Int)->Void))

/*:
## Zwracana WartoÅ›Ä‡

 **KaÅ¼da funkcja w Swift zwraca wartoÅ›Ä‡!**. Typ zwracanej wartoÅ›ci moÅ¼e byÄ‡ pominiÄ™ty jeÅ¼eli jest to `Void` lub jak wiemy pusta krotka `()`. Nie musimy jego deklarowac i nie musimy jego zwracaÄ‡. Kompilator zrobi to za nas. PoniÅ¼sze dwie funkcje maja ten sam typ i _pod spodem_ sÄ… identyczne.
 */

func returnVoidSilent() {}
func returnVoidExplicit() -> Void { return () }

type(of: returnVoidSilent)
type(of: returnVoidExplicit)

/*:
W obu przypadkach typ jest `() -> ()` czyli "funkcja, ktÃ³ra nie przyjmuje Å¼adnych argumentÃ³w i **nic** nie zwraca". Zaraz, zaraz. PowiedziaÅ‚em, Å¼e nic nie zwraca a jednak zwraca? To jak to jest?

 To cudo _zwracane_ na koÅ„cu funkcji to jest taki sprytny _hak_ aby komputer wiedziaÅ‚ kiedy funkcja zakoÅ„czyÅ‚a dziaÅ‚anie. Nazwa `Void` sugerujÄ…ca _nic_ lub _prÃ³Å¼niÄ™_ w tym wypadku jest trochÄ™ mylÄ…ca. PrzecieÅ¼ pusta krotka to nie jest nic! Natomiast nie mamy za duÅ¼ego wyboru i w zaleÅ¼noÅ›ci od kontekstu moÅ¼e znaczyÄ‡Â rÃ³Å¼ne rzeczy. Polecam poszukaÄ‡ "bottom" jeÅ¼eli ten wÄ…tek wydaje siÄ™ interesujÄ…cy.

 */


//: Bardzo ciekawym przypadkiem sÄ… [__operatory__](07_05_operatory) (+, -, *, / etc.) gdyÅ¼ sÄ… one przeciÄ…Å¼onymi funkcjami (ten sam symbol uÅ¼ywam do _Å‚Ä…czenia_ rÃ³Å¼nych wartoÅ›ci).

 6  +  9 // klikamy z altem na "+"
"a" + "b"
[1] + [2]

//: MoÅ¼emy nawet taki operator przypisaÄ‡ do zmiennej jednak musimy podaÄ‡ konkretny "wariant przeciÄ…Å¼enia" aby kompilator wiedziaÅ‚ o ktÃ³rÄ… wersje nam chodzi.

let adder: (Int, Int) -> Int = (+)
adder(6,9)

//:[ToC](00-00_toc) | [Tips and Tricks](900-00-tips_and_tricks) | [Previous](@previous) | [Next](@next)
