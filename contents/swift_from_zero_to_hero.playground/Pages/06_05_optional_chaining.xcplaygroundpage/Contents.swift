//:[ToC](00-00_toc) | [Tips and Tricks](900-00-tips_and_tricks) | [Previous](@previous) | [Next](@next)
/*:
 # [Optional Chaining](https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/OptionalChaining.html)
 
 Optional czyli typ, ktÃ³ry mÃ³wi nam, Å¼e jakiejÅ› wartoÅ›ci moÅ¼e zabraknÄ…Ä‡ jest bardzo powszechny. CzÄ™sto w Å¼yciu czegoÅ›Â brakuje albo moÅ¼e zabraknÄ…Ä‡. Nie jest to teÅ¼Â pierwszy raz kiedy siÄ™ z nim spotykamy.
 
 Swift daje nam mechanizm _optional binding_u ktÃ³ry pozwala nadaÄ‡ czemuÅ› nazwÄ™ jeÅ¼eli wartoÅ›Ä‡ istnieje. WidzieliÅ›my to wiele razy. Natomiast co w sytuacji gdzie to coÅ› czego moÅ¼e nam zabraknÄ…Ä‡ teÅ¼ ma opcjonalne wartoÅ›ci?
 
 Zbudujemy informacje o pogodzie za pomocÄ… tych stuktÃ³re, ktÃ³re juÅ¼ znamy: sÅ‚owniki, krotki i tablice.
 */

let optionalWeatherData: [String: (temperature: Int?, humidity: String?)?]?
type(of: optionalWeatherData)

/*:
 WiÄ™c cÃ³Å¼ to za koszmarek. Mam:
 * opcjonalny sÅ‚ownik z kluczami typu String
 * wartoÅ›ciami sÄ… *opcjonalne tuplety**
 * ktÃ³rych pierwsza wartoÅ›Ä‡ to Opcjonalny Int
 * druga wartoÅ›Ä‡ to opcjonalny String
 
 Niech jakieÅ› dane bÄ™dÄ… w tym sÅ‚owniku:
 */

optionalWeatherData =
[
    "BiaÅ‚ystok" : (temperature: 14, humidity: "70%"),
    "Warszawa"  : nil,
    "SuwaÅ‚ki"   : (temperature: nil, humidity: "80%")
]

/*:
 Jak widaÄ‡ czasem nam brakuje rÃ³Å¼nych informacji. Teraz gdybyÅ›my chcieli sprawdziÄ‡ pogodÄ™ w BiaÅ‚ymstoku za korzystajÄ…c z `if let` to kod wyglÄ…daÅ‚by tak:
 */
let city = "BiaÅ‚ystok"

if let weatherData = optionalWeatherData { // we have data
    type(of: weatherData)
    type(of: weatherData[city])
    
    // Optional Optional! Madness!
    
    if let optionalCityEntry = weatherData[city] { // we have a key in a dictionary
        type(of: optionalCityEntry)

        if let cityEntry = optionalCityEntry { // we have an entry
            type(of: cityEntry)
            
            if let temperature = cityEntry.temperature { // we have temperature
                print("ğŸŒŸ", #line, city, "has", temperature, "C")
            } else {
               print("ğŸ›¤", #line, "Missing temperature for:", city)
            }
            
            if let humidity = cityEntry.humidity { // we have humidity
                print("ğŸ’¦", #line, city, "has", humidity, "C")
            } else {
               print("ğŸ›¤", #line, "Missing humidity for:", city)
            }
            
        } else {
            print("ğŸ›¤", #line, "Missing entry:", city)
        }
    } else {
        print("ğŸ›¤", #line, "Missing city:", city)
    }
} else {
    print("ğŸ›¤", #line, "No weather data!")
}

/*:
 Polecam uruchomiÄ‡ ten kod dla innych miast aby zobaczyÄ‡ jak dziaÅ‚a. Natomiast na pewno jest to maÅ‚o czytelny kod! Jednak struktura zwracanych danych i API z jakiego korzystamy sprawia, Å¼e **na kaÅ¼dym poziomie MUSIMY** handlowaÄ‡ potencjalny brak wartoÅ›ci. Prawda jest taka, Å¼e w innym jÄ™zyku aby aplikacja siÄ™ nie wywalaÅ‚a trzeba by to byÅ‚o tak napisaÄ‡. Tak czyli sprawdziÄ‡ kaÅ¼dÄ… moÅ¼liwÄ… Å›cieÅ¼kÄ™ kiedy moÅ¼e nie byÄ‡ wartoÅ›ci. WiÄ™c pod **tym wzglÄ™dem jest to BARDZO DOBRY kod**.
 
 CaÅ‚e szczÄ™Å›cie nie jesteÅ›my skazani na coÅ› takiego. Swift daje wÅ‚aÅ›nie mechanizm **Optional chaining**-u.
 
 Dla przypomnienia z czym walczymy na kaÅ¼dym poziomie:
 */

let tempInCity = optionalWeatherData?[city]??.temperature
type(of: tempInCity)

/*:
 Plac zabaw nas trochÄ™ oszukuje wypisujÄ…c wartoÅ›Ä‡. Jednak wypisujÄ…c typ widaÄ‡, Å¼e pracujemy dalej z Optional-em. Jednak teraz juÅ¼ tylko na jednym poziomie! I moÅ¼emy posÅ‚uÅ¼yÄ‡ siÄ™Â dalej optional binding-iem.
 */

if let temperature = optionalWeatherData?[city]??.temperature {
    print("ğŸŒŸ", #line, city, "has", temperature, "C")
} else {
    print("ğŸ›¤", #line, "Missing temperature for:", city)
}

if let humidity = optionalWeatherData?[city]??.humidity {
    print("ğŸ’¦", #line, city, "has", humidity, "C")
} else {
   print("ğŸ›¤", #line, "Missing humidity for:", city)
}

/*:
 Prawda, Å¼e znacznie lepiej! Znakiem zapytania `?` mÃ³wimy: _daj mi wartoÅ›Ä‡ jak jest a jak nie to nic nie rÃ³b_. JeÅ¼eli potrzebujemy tych wartoÅ›ci razem to nawet moÅ¼na je skleiÄ‡ w jeden `if let`. Gdy trzeba siÄ™ byÅ‚o dobraÄ‡ do Opcjonalnego Optional-a to przez kaÅ¼dy poziom przedzieraliÅ›my siÄ™ dodajÄ…c jeszcze jeden znak zapytania: `??`. Gdyby to byÅ‚ Opcjonalny Opcjonalny Opcjonalny... to by dochodziÅ‚y kolejne `?`. Zasada dla `guard let` jest identyczna jak dla `if let`.
 */

if
    let temperature = optionalWeatherData?[city]??.temperature,
    let humidity = optionalWeatherData?[city]??.humidity{
    print("ğŸŒŸ", #line, city, "has", temperature, "C")
     print("ğŸ’¦", #line, city, "has", humidity, "C")
} else {
    print("ğŸ›¤", #line, "Missing temperature for:", city)
    print("ğŸ›¤", #line, "Missing humidity for:", city)
}

/*:
  Optional chaining to nie jedyny sposÃ³b aby siÄ™Â dobraÄ‡ do wartoÅ›ci owiniÄ™tej w Optional. Natomiast chyba jest najczÄ™Å›ciej spotykany. Tak wiÄ™c warto przyzwyczaiÄ‡ siÄ™ do tych `?` bo bÄ™dziesz oglÄ…daÄ‡ i pisaÄ‡ je bardzo czÄ™sto.
 */



//:[ToC](00-00_toc) | [Tips and Tricks](900-00-tips_and_tricks) | [Previous](@previous) | [Next](@next)
